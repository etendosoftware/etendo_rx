plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java'
    id 'idea'
}

group = 'com.etendorx.das'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.2")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest:2.5.10'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation project(':com.etendorx.entities')
    implementation project(':com.etendorx.grpc.common')
    implementation 'net.devh:grpc-server-spring-boot-starter:2.13.1.RELEASE'
    implementation 'com.google.protobuf:protobuf-java-util:3.19.4'
    implementation (project(':com.etendorx.utils.auth')) {
        exclude group: 'org.slf4j', module: '*'
    }
    implementation "org.springframework.boot:spring-boot-starter-actuator"

}

bootRun {
    debugOptions{
        port = Integer.valueOf((findProperty('debugPort') ?: port.get()) as String)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

println sourceSets.main.java.srcDirs

bootBuildImage {
    imageName = "${dasPushImage}"
    publish = true
    docker {
        publishRegistry {
            url = "${pushUrl}"
            username = "${pushUsername}"
            password = "${pushPassword}"
        }
    }
}

springBoot {
    buildInfo()
}
