plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java'
    id 'idea'
    id 'maven-publish'
}

group = 'com.etendorx'
version = "$gradle.ext.version"
sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

publishing {
    publications {
        bootJava(MavenPublication) {
            groupId = group
            artifactId = 'das'
            version = version
            artifact tasks.named("bootJar")
        }
    }
    repositories {
        maven {
            url "${repositoryUrl}"
            credentials {
                username = "${repositoryUser}"
                password = "${repositoryPassword}"
            }
        }
    }
}

ext {
    set('springCloudVersion', "2022.0.4")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations {
    // Configuration used to store the autogenerated files that the 'bootJar' should not include
    codegen
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    runtimeOnly group: 'com.oracle.database.jdbc', name: 'ojdbc8', version: '21.6.0.0.1'
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.3.8'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly project(':com.etendorx.entities')
    codegen project(':com.etendorx.entities')
    implementation 'net.devh:grpc-server-spring-boot-starter:2.13.1.RELEASE'
    implementation 'com.google.protobuf:protobuf-java-util:3.19.4'
    implementation(project(':com.etendorx.utils.auth')) {
        exclude group: 'org.slf4j', module: '*'
    }
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation(project(':com.etendorx.das_core'))

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql:1.17.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.3'
    testImplementation project(':com.etendorx.entities')
    testImplementation 'net.java.dev.jna:jna:5.7.0'
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    if(project.hasProperty('grpc.enabled') && project.property('grpc.enabled') == "true") {
        println "GRP Enabled"
        codegen project(':com.etendorx.grpc.common')
        implementation 'net.devh:grpc-server-spring-boot-starter:2.13.1.RELEASE'
        testImplementation project(':com.etendorx.grpc.common')
        testImplementation 'io.grpc:grpc-testing:1.49.0'
        testImplementation 'io.github.lognet:grpc-spring-boot-starter:4.6.0'
    }
    if(project.hasProperty('data-rest.enabled') && project.property('data-rest.enabled') == "true") {
        implementation 'org.springframework.boot:spring-boot-starter-data-rest:2.5.10'
    } else {
        testImplementation 'org.springframework.data:spring-data-rest-core:4.1.4'
    }
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
}

var directories = ["libs", "modules_core", "modules_gen", "modules_test", "modules"]
afterEvaluate {
    directories.each { dir ->
        var fileToFind = "build.gradle"
        def startDir = new File(project.rootDir, dir)

        if (startDir.exists() && startDir.isDirectory()) {
            def subDirs = findSubDirectoriesWithFile(startDir, fileToFind)

            subDirs.each { subDir ->
                if (includeInDasDependencies(new File(subDir, fileToFind))) {
                    dependencies {
                        implementation(project(":${subDir.name}"))
                    }
                }
            }
        }
    }
}

static List<File> findSubDirectoriesWithFile(File startDir, String fileName) {
    def subDirs = []
    startDir.eachDirRecurse { dir ->
        if (new File(dir, fileName).isFile()) {
            subDirs << dir
        }
    }
    return subDirs
}

static boolean includeInDasDependencies(File propertiesFile) {
    Properties properties = new Properties()
    propertiesFile.withInputStream { properties.load(it) }
    return properties.get('includeInDasDependencies')?.toBoolean() ?: false
}

sourceSets.main.compileClasspath += configurations.codegen

bootJar {
    manifest {
        // Used to allow adding extra JAR files to the executable boot JAR
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

bootRun {
    classpath += configurations.codegen
    debugOptions {
        port = Integer.valueOf((findProperty('debugPort') ?: port.get()) as String)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src-gen/main/java'
        }
    }
}

bootBuildImage {
    imageName = "${dasPushImage}"
    publish = true
    docker {
        publishRegistry {
            url = "${pushUrl}"
            username = "${pushUsername}"
            password = "${pushPassword}"
        }
    }
}

springBoot {
    buildInfo()
}
