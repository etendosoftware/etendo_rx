plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java'
    id 'idea'
    id 'maven-publish'
}

group = 'com.etendorx'
version = '0.0.1'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

publishing {
    publications {
        bootJava(MavenPublication) {
            groupId = group
            artifactId = 'das'
            version = version
            artifact tasks.named("bootJar")
        }
    }
    repositories {
        maven {
            url "${repositoryUrl}"
            credentials {
                username = "${repositoryUser}"
                password = "${repositoryPassword}"
            }
        }
    }
}

ext {
    set('springCloudVersion', "2021.0.2")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations {
    // Configuration used to store the autogenerated files that the 'bootJar' should not include
    codegen
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest:2.5.10'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    codegen project(':com.etendorx.entities')
    codegen project(':com.etendorx.grpc.common')
    implementation 'net.devh:grpc-server-spring-boot-starter:2.13.1.RELEASE'
    implementation 'com.google.protobuf:protobuf-java-util:3.19.4'
    implementation (project(':com.etendorx.utils.auth')) {
        exclude group: 'org.slf4j', module: '*'
    }
    implementation "org.springframework.boot:spring-boot-starter-actuator"

}

sourceSets.main.compileClasspath += configurations.codegen

bootJar {
    manifest {
        // Used to allow adding extra JAR files to the executable boot JAR
        attributes 'Main-Class' : 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

bootRun {
    classpath += configurations.codegen
    debugOptions{
        port = Integer.valueOf((findProperty('debugPort') ?: port.get()) as String)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src-gen/main/java'
        }
    }
}

bootBuildImage {
    imageName = "${dasPushImage}"
    publish = true
    docker {
        publishRegistry {
            url = "${pushUrl}"
            username = "${pushUsername}"
            password = "${pushPassword}"
        }
    }
}

springBoot {
    buildInfo()
}
