plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java'
    id 'maven-publish'
}

group = 'com.etendorx'
version = "$gradle.ext.version"
sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

publishing {
    publications {
        bootJava(MavenPublication) {
            groupId = group
            artifactId = 'auth'
            version = version
            artifact tasks.named("bootJar")
        }
    }
    repositories {
        maven {
            url "${repositoryUrl}"
            credentials {
                username = "${repositoryUser}"
                password = "${repositoryPassword}"
            }
        }
    }
}

dependencies {
    implementation 'org.codehaus.jettison:jettison:1.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation(project(':com.etendorx.utils.auth')) {
        exclude group: 'org.slf4j', module: '*'
    }

    implementation project(":com.etendorx.clientrest")
    implementation project(":com.etendorx.clientrest_core")

    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // String Utils
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    // Feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.4'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'io.github.openfeign:feign-okhttp'
    implementation 'io.github.openfeign:feign-jackson'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'org.springframework.hateoas:spring-hateoas:2.1.2'

    // Test
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.wiremock:wiremock-standalone:3.9.1'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
}

ext {
    set('springCloudVersion', "2022.0.4")
}

sourceSets {
    main {
        java {
            srcDirs += ['src-gen/main/java']
        }
    }
}

/**
 * To debug run with --debug-jvm -PdebugPort=<port>
 * ./gradlew com.etendorx.auth:bootRun --info --debug-jvm -PdebugPort=9994
 */
bootRun {
    debugOptions {
        port = Integer.valueOf((findProperty('debugPort') ?: port.get()) as String)
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

bootBuildImage {
    imageName = "${authPushImage}"
    publish = true
    docker {
        publishRegistry {
            url = "${pushUrl}"
            username = "${pushUsername}"
            password = "${pushPassword}"
        }
    }
}
springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
}
