pipeline {
    options {
        disableConcurrentBuilds()
    }

    environment { // MARK: Environment variables
        CONTEXT_NAME        = 'etendo'
        BBDD_SID            = 'etendo'
        BBDD_PORT           = '5432'
        BBDD_SYSTEMUSER     = 'postgres'
        BBDD_SYSTEMPASS     = 'syspass'
        BBDD_USER           = 'tad'
        BBDD_PASSWORD       = 'tad'
        NEXUS_USER          = credentials('nexus-admin-user')
        NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
        GITHUB_USER         = 'etendobot'
        GITHUB_TOKEN        = credentials('github-read-package-token')
        JAVA_HOME           = '/usr/lib/jvm/java-17-openjdk-amd64'
        ACCESS_TOKEN        = credentials('access_token_github')
        EMAIL_ADDRESS       = credentials('email_builds')
        RX_REPO_URL         = "https://github.com/etendosoftware/etendo_rx"
        RX_DIR              = "etendo_rx"

        COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

        BUILD_CLASSIC       = true

        SONAR_VERSION       = "5.0.1.3006"
        SONARQUBE_URL       = credentials('sonarqube-url')
        SONARQUBE_TOKEN     = credentials('sonar-token-access')

        TOMCAT_URL          = "https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.tar.gz"

        SUCCESS             = 'SUCCESS'
        FAILED              = 'FAILED'
        ABORTED             = 'ABORTED'
        UNSTABLE            = 'UNSTABLE'
    }

    agent { // MARK: Agent
        kubernetes {
            inheritFrom 'jenkins-node-rx'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-core-unittests-rx
  namespace: jenkins2025
  labels:
    app.kubernetes.io/name: jenkins-node-core-unittests-rx
spec:
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.7
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock &&
                rm /etc/apt/sources.list.d/pgdg.list || echo 0 &&
                apt update &&
                apt install -y curl postgresql-client
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
    - name: postgres
      image: postgres:14
      workingDir: /home/jenkins
      env:
        - name: POSTGRES_PASSWORD
          value: syspass
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext:
    privileged: true

"""
        }
    }
    stages { // MARK: Stages
        stage ('Clone and Setup RX Repo') { // MARK: Clone RX Repo
            steps {
                container('compiler') {
                    script {
                        try {
                            echo "---------------------- Setting up Environment Variables ----------------------"
                            env.EXIST_JACOCO_REPORT = false
                            env.STATUSTEST = "1"
                            env.STATUSRX = "1"

                            echo "---------------------- Clonning RX Repo ----------------------"
                            sh """
                            printenv
                            git clone ${RX_REPO_URL}
                            """

                            echo "--------------- Checking out to Commit Hash ---------------"
                            def commitExists = sh(script: """
                            cd ${RX_DIR}
                            git cat-file -t ${GIT_COMMIT}
                            """, returnStatus: true) == 0

                            if (!commitExists) {
                                currentBuild.result = ABORTED
                                env.COMMIT_INFO = "Commit hash ${GIT_COMMIT} does not exist in the repository."
                                echo "Commit hash ${GIT_COMMIT} does not exist in the repository."
                                return
                            }

                            echo "---------------------- Setup RX Repo ----------------------"
                            sh """
                            cd ${RX_DIR}
                            git checkout ${GIT_COMMIT}
                            cp gradle.properties.template gradle.properties
                            sed -i 's/^githubUser=.*/githubUser=${GITHUB_USER}/' gradle.properties
                            sed -i 's/^githubToken=.*/githubToken=${GITHUB_TOKEN}/' gradle.properties
                            sed -i 's/^grpc.enabled=.*/grpc.enabled=true/' gradle.properties
                            sed -i 's/^data-rest.enabled=.*/data-rest.enabled=true/' gradle.properties
                            mkdir -p modules
                            ./gradlew setup
                            """
                            
                            env.COMMIT_INFO = "<p>Commit: ${RX_REPO_URL}/commit/${GIT_COMMIT}<br>Author: ${COMMIT_AUTHOR_NAME} (${COMMIT_AUTHOR_EMAIL})</p>"
                            echo "---------------------- Commit Info ----------------------"
                            echo "${COMMIT_INFO}"

                            currentBuild.result = SUCCESS
                            echo "---------------------- Clone and Setup RX Repo Successful ----------------------"
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo "---------------------- Clone and Setup RX Repo Failed ----------------------"
                            currentBuild.result = FAILED
                            error('Clone and Setup RX Repo Failed')
                            env.STATUSRX = "0"
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo Core') { // MARK: Build Environment Etendo Core
            when {
                expression {
                    env.BUILD_CLASSIC == "true" && currentBuild.result == SUCCESS
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            sh "./pipelines/run-tests/build-update.sh ${RX_DIR} pending \"Build Environment Etendo Core\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}"
                            echo "---------------- Stack Configuration ----------------"

                            sh "wget -O apache-tomcat.tar.gz $TOMCAT_URL"
                            sh "tar -xvf apache-tomcat.tar.gz -C $WORKSPACE"

							env.TOMCAT_FOLDER = sh(script: "basename ${TOMCAT_URL} .tar.gz", returnStdout: true).trim()
                            env.CATALINA_HOME = "${WORKSPACE}/${TOMCAT_FOLDER}"
                            env.CATALINA_BASE = "${WORKSPACE}/${TOMCAT_FOLDER}"

                            withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                                echo "---------------------- Starting Classic Environment ----------------------"
                                sh "GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone --branch release/24.4 git@github.com:etendosoftware/etendo_core.git"
                                dir("etendo_core") {
                                    sh """
                                    echo "\n
                                    context.name=${CONTEXT_NAME}\n
                                    bbdd.sid=${BBDD_SID}\n
                                    bbdd.port=${BBDD_PORT}\n
                                    bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                                    bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                                    bbdd.user=${BBDD_USER}\n
                                    bbdd.password=${BBDD_PASSWORD}\n
                                    nexusUser=${NEXUS_USER}\n
                                    nexusPassword=${NEXUS_PASSWORD}\n
                                    githubUser=${GITHUB_USER}\n
                                    githubToken=${GITHUB_TOKEN}\n
                                    allow.root=true\n
                                    org.gradle.jvmargs=-Dfile.encoding=UTF-8" > gradle.properties
                                    """
                                    sh "./gradlew prepareConfig --stacktrace"
                                    sh "./gradlew setup --stacktrace"
                                    sh "./gradlew expandModules --stacktrace"

                                    sh """
                                    cd modules
                                    GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone --branch main git@github.com:etendosoftware/com.etendoerp.etendorx.git
                                    git clone --branch develop https://github.com/etendosoftware/com.etendoerp.integration.petclinic.git
                                    """
                                    
                                    sh "./gradlew install --stacktrace"
                                    sh "./gradlew smartbuild --stacktrace"
                                    currentBuild.result = SUCCESS
                                    echo "---------------------- Classic Environment Successful ----------------------"
                                }
                            }

                            echo "---------------------- Inserting Configs ----------------------"
                            withEnv(["PGPASSWORD=${env.BBDD_PASSWORD}"]) {
                                sh """
                                    psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} <<EOF

                                    INSERT INTO smfsws_config (
                                        smfsws_config_id, ad_client_id, ad_org_id, isactive, created, createdby,
                                        updated, updatedby, expirationtime, privatekey
                                    ) VALUES (
                                        '07054A65ACCB423F90D270130DCD02E4',
                                        '0',
                                        '0',
                                        'Y',
                                        '2025-04-16 13:19:11.492',
                                        '100',
                                        '2025-04-16 13:19:11.492',
                                        '100',
                                        0,
                                        '{"private-key":"-----BEGIN PRIVATE KEY-----MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgoP6uMq5AuRjREe3oUUeuh6LJTYWTnPvr7Ds8+mstk5+hRANCAASjRJgZeEBfLflXzTYeSFuPSlwBGlVKXDY1+baWJM2L0E+o3NLyLWFY1qjfudRUY8H3AkSoNY3KmfT67h7We56F-----END PRIVATE KEY-----","public-key":"-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEo0SYGXhAXy35V802Hkhbj0pcARpVSlw2Nfm2liTNi9BPqNzS8i1hWNao37nUVGPB9wJEqDWNypn0+u4e1nuehQ==-----END PUBLIC KEY-----"}'
                                    );

                                    INSERT INTO etrx_config (
                                        etrx_config_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby,
                                        service_name, service_url, updateable_configs, public_url, restart_services
                                    ) VALUES
                                    ('B9393395A3074D5FBD3E1863D9BD2671', '0', '0', 'Y', '2025-04-16 13:27:01.655', '100', '2025-04-16 13:27:01.655', '100', 'config', 'http://localhost:8888', 'N', 'http://localhost:8888', 'Y'),
                                    ('E00B0AADFF024417BF67D0313AAFCF28', '0', '0', 'Y', '2025-04-16 13:27:01.66',  '100', '2025-04-16 13:27:01.66',  '100', 'auth', 'http://localhost:8094', 'Y', 'http://localhost:8094', 'Y'),
                                    ('1E738098F45344DAAD18A8FC352E0876', '0', '0', 'Y', '2025-04-16 13:27:01.669', '100', '2025-04-16 13:27:01.669', '100', 'das', 'http://localhost:8092', 'Y', 'http://localhost:8092', 'Y'),
                                    ('80B5E214E3B444FFBF48FA7F563E8F0D', '0', '0', 'Y', '2025-04-16 13:27:01.673', '100', '2025-04-16 13:27:01.673', '100', 'edge', 'http://localhost:8096', 'Y', 'http://localhost:8096', 'Y'),
                                    ('B3FB8056DC2F4D37BD0B85CD0CB998A8', '0', '0', 'Y', '2025-04-16 13:27:01.676', '100', '2025-04-16 13:27:01.676', '100', 'asyncprocess', 'http://localhost:9092', 'Y', 'http://localhost:9092', 'Y'),
                                    ('0976C13F5C364F918D9A94282A0EF980', '0', '0', 'Y', '2025-04-16 13:27:01.689', '100', '2025-04-16 13:27:01.689', '100', 'obconnsrv', 'http://localhost:8101', 'Y', 'http://localhost:8101', 'Y'),
                                    ('C1EB36E4B2A1442FB45C78926CDD4E36', '0', '0', 'Y', '2025-04-16 13:27:01.691', '100', '2025-04-16 13:27:01.691', '100', 'worker', 'http://localhost:0', 'Y', 'http://localhost:0', 'Y');

                                    INSERT INTO etrx_service_param (
                                        etrx_service_param_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby,
                                        param_value, param_key, etrx_config_id
                                    ) VALUES
                                    ('5C321A9820CE4AA496F07D06F24CC70E', '0', '0', 'Y', '2025-04-16 13:27:01.656', '100', '2025-04-16 13:27:01.656', '100', 'http://localhost:8092', 'das.url', 'B9393395A3074D5FBD3E1863D9BD2671'),
                                    ('FDBDF078070047E0A49D09FBDB87FDD6', '0', '0', 'Y', '2025-04-16 13:27:01.657', '100', '2025-04-16 13:27:01.657', '100', 'http://localhost:8080', 'classic.url', 'B9393395A3074D5FBD3E1863D9BD2671'),
                                    ('11950F994DBB40019E900209B0B0BDAE', '0', '0', 'Y', '2025-04-16 13:27:01.665', '100', '2025-04-16 13:27:01.665', '100', 'http://localhost:8092', 'das.url', 'E00B0AADFF024417BF67D0313AAFCF28'),
                                    ('37CF36206FC54E1996D28DEF4FAB7FC4', '0', '0', 'Y', '2025-04-16 13:27:01.666', '100', '2025-04-16 13:27:01.666', '100', 'http://localhost:8080', 'classic.url', 'E00B0AADFF024417BF67D0313AAFCF28'),
                                    ('5DC4588085AF42A38547A3E996988E62', '0', '0', 'Y', '2025-04-16 13:27:01.669', '100', '2025-04-16 13:27:01.669', '100', 'http://localhost:8092', 'das.url', '1E738098F45344DAAD18A8FC352E0876'),
                                    ('B107590E820F48328EA7EE7880DE5E65', '0', '0', 'Y', '2025-04-16 13:27:01.671', '100', '2025-04-16 13:27:01.671', '100', 'http://localhost:8080', 'classic.url', '1E738098F45344DAAD18A8FC352E0876'),
                                    ('F2F1FAD5AD284162A8BF70E538810D3D', '0', '0', 'Y', '2025-04-16 13:27:01.674', '100', '2025-04-16 13:27:01.674', '100', 'http://localhost:8092', 'das.url', '80B5E214E3B444FFBF48FA7F563E8F0D'),
                                    ('F14FE88FE871496D957FA5D299EF55F9', '0', '0', 'Y', '2025-04-16 13:27:01.675', '100', '2025-04-16 13:27:01.675', '100', 'http://localhost:8080', 'classic.url', '80B5E214E3B444FFBF48FA7F563E8F0D'),
                                    ('93A49116DBE449FDAF8F178058215223', '0', '0', 'Y', '2025-04-16 13:27:01.677', '100', '2025-04-16 13:27:01.677', '100', 'http://localhost:8092', 'das.url', 'B3FB8056DC2F4D37BD0B85CD0CB998A8'),
                                    ('52D7DAA3B85E466F98D112B2B68FBB72', '0', '0', 'Y', '2025-04-16 13:27:01.688', '100', '2025-04-16 13:27:01.688', '100', 'http://localhost:8080', 'classic.url', 'B3FB8056DC2F4D37BD0B85CD0CB998A8'),
                                    ('4F679F105FFB40429EE0AEA007E35F30', '0', '0', 'Y', '2025-04-16 13:27:01.69',  '100', '2025-04-16 13:27:01.69',  '100', 'http://localhost:8092', 'das.url', '0976C13F5C364F918D9A94282A0EF980'),
                                    ('7DF211A4800F4BEDABD264A906736EC3', '0', '0', 'Y', '2025-04-16 13:27:01.69',  '100', '2025-04-16 13:27:01.69',  '100', 'http://localhost:8080', 'classic.url', '0976C13F5C364F918D9A94282A0EF980'),
                                    ('18F282F7C6D64DE69D2BB96E039C8798', '0', '0', 'Y', '2025-04-16 13:27:01.692', '100', '2025-04-16 13:27:01.692', '100', 'http://localhost:8092', 'das.url', 'C1EB36E4B2A1442FB45C78926CDD4E36'),
                                    ('90CCE704383048779AD4DCE4CF4C4A80', '0', '0', 'Y', '2025-04-16 13:27:01.692', '100', '2025-04-16 13:27:01.692', '100', 'http://localhost:8080', 'classic.url', 'C1EB36E4B2A1442FB45C78926CDD4E36');
                                """
                            }
							sh "${WORKSPACE}/${TOMCAT_FOLDER}/bin/catalina.sh start"
							sh "sleep 1m"
                            echo "--------------- Build Environment Successful ---------------"
                        } catch (Exception e) {
                            echo "---------------------- Classic Environment Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = FAILED
                            error('Classic Environment Failed')
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo RX') { // MARK: Build Environment Etendo RX
            when {
                expression {
                    currentBuild.result == SUCCESS
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            echo "---------------------- Building Etendo RX Environment ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./pipelines/run-tests/build-update.sh ${RX_DIR} pending \"Building Etendo RX Environment\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}
                            mkdir -p modules
                            mkdir -p modules_test
                            cd modules_test
                            git clone --branch develop https://github.com/etendosoftware/com.etendorx.integration.petclinic.git
                            cd ..
                            ./gradlew generate.entities
                            """
                            currentBuild.result = SUCCESS
                            echo "---------------------- Build of Etendo RX Successful ----------------------"
                        } catch (Exception e) {
                            echo "---------------------- Build of Etendo RX Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = FAILED
                            error('Build of Etendo RX Failed')
                            env.STATUSRX = "0"
                        }
                    }
                }
            }
        }
        stage ("Run AsyncProcess Tests") { // MARK: Run AsyncProcess Tests
            when {
                expression {
                    false
                }
            }
            steps {
                script {
                    try {
                        echo "---------------------- Running AsyncProcess Tests ----------------------"
                        sh """
                        cd ${RX_DIR}
                        ./gradlew :com.etendorx.asyncprocess:test jacocoRootReport
                        """
                        echo "---------------------- AsyncProcess Tests Successful ----------------------"
                    } catch (Exception e) {
                        echo "---------------------- AsyncProcess Tests Failed ----------------------"
                        echo 'Exception occurred: ' + e.toString()
                        currentBuild.result = UNSTABLE
                        unstable('AsyncProcess Tests Failed')
                        env.STATUSTEST = "0"
                    } 
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "${RX_DIR}/modules_core/com.etendorx.asyncprocess/build/reports/tests/test",
                        reportFiles: '*.html',
                        reportName: 'ASYNPROCESS TESTS REPORT',
                        reportTitles: ''
                    ])
                }
            }
        }
        stage ("Run Auth Tests") { // MARK: Run Auth Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Building services ----------------------"
                            dir("${RX_DIR}") {
                                sh """
                                    ./gradlew com.etendorx.configserver:build -x test
                                    ./gradlew com.etendorx.das:build -x test
                                    ./gradlew com.etendorx.entities:build -x test
                                    ./gradlew com.etendorx.auth:build -x test
                                """

                                def rxVersion = sh(
                                    script: "grep 'gradle.ext.version' settings.gradle | awk -F\"'\" '{print \$2}'",
                                    returnStdout: true
                                ).trim()

                                env.RX_VERSION = rxVersion

                                sh """
                                    cp modules_core/com.etendorx.configserver/build/libs/com.etendorx.configserver-${env.RX_VERSION}.jar /tmp/
                                    cp modules_core/com.etendorx.das/build/libs/com.etendorx.das-${env.RX_VERSION}.jar /tmp/
                                    cp modules_gen/com.etendorx.entities/build/libs/com.etendorx.entities-${env.RX_VERSION}-plain.jar /tmp/
                                    cp modules_core/com.etendorx.auth/build/libs/com.etendorx.auth-${env.RX_VERSION}.jar /tmp/

                                    echo "---------------------- Running Auth Tests ----------------------"
                                    ./gradlew com.etendorx.auth:test
                                    ./gradlew jacocoTestReport
                                """
                            }
                            echo "---------------------- Auth Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo "---------------------- Auth Tests Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = UNSTABLE
                            unstable('Auth Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_core/com.etendorx.auth/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_core/com.etendorx.auth/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'AUTH TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage ("Run Das Tests") { // MARK: Run Das Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Running Das Tests ----------------------"
                            def tests = [
                                "com.etendorx.das.test.RepositoryTest",
                                "com.etendorx.das.test.RestCallTest",
                                "com.etendorx.das.test.DefaultFiltersTest",
                                "com.etendorx.das.test.eventhandlertest.test.AnnotationTests",
                                "com.etendorx.das.unit.BindedRestControllerTest",
                                "com.etendorx.das.unit.JsonPathEntityRetrieverDefaultTest",
                                "com.etendorx.das.unit.MappingUtilsImplTest",
                                "com.etendorx.das.test.DisableEnableTriggersTest",
                                "com.etendorx.das.test.FieldMappingRestCallTest",
                                "com.etendorx.das.integration.PropertyMetadataTest",
                                "com.etendorx.das.unit.BaseDTORepositoryDefaultTests",
                                "com.etendorx.das.unit.JsonPathConverterBaseTests",
                                "com.etendorx.entities.mapper.lib.JsonPathEntityRetrieverBaseTests"
                            ]

                            int counter = 1

                            dir(RX_DIR) {
                                tests.each { test ->
                                    sh "./gradlew :com.etendorx.das:test --info --tests ${test} jacocoTestReport"
                                    sh "mv modules_core/com.etendorx.das/build/jacoco/test.exec modules_core/com.etendorx.das/build/jacoco/test${counter}.exec"
                                    counter++
                                }
                            }

                            dir(RX_DIR) {
                                sh "./gradlew :com.etendorx.integration.petclinic:test --info jacocoTestReport"
                            }

                            echo "---------------------- Das Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo "---------------------- Das Tests Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = UNSTABLE
                            unstable('Das Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_core/com.etendorx.das/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_core/com.etendorx.das/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'DAS TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage ("Run Edge Tests") { // MARK: Run Edge Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Running Edge Tests ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./gradlew :com.etendorx.edge:test jacocoTestReport
                            """
                            echo "---------------------- Edge Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo "---------------------- Edge Tests Failed ----------------------"
                            currentBuild.result = UNSTABLE
                            unstable('Edge Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_core/com.etendorx.edge/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_core/com.etendorx.edge/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'EDGE TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage ("Run Event Handler Tests") { // MARK: Run Event Handler Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Running Event Handler Tests ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./gradlew :com.etendorx.test.eventhandler:test jacocoTestReport
                            """
                            echo "---------------------- Event Handler Successful ----------------------"
                        } catch (Exception e) {
                            echo "---------------------- Event Handler Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = UNSTABLE
                            unstable('Event Handler Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_test/com.etendorx.test.eventhandler/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_test/com.etendorx.test.eventhandler/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'EVENT HANDLER TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage('Generate Coverage Report') { // MARK: Generate Coverage Report
            when {
                expression {
                    env.STATUSRX == "1" && env.STATUSTEST == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        dir(RX_DIR) {
                            echo "---------------------- Run jacocoRootReport ----------------------"
                            sh "./gradlew jacocoRootReport"

                            env.JACOCO_REPORT = "build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"

                            if (fileExists("${JACOCO_REPORT}")) {
                                echo "---------------------- Jacoco Report Found ----------------------"
                                env.EXIST_JACOCO_REPORT = true
                            }
                        }
                    }
                }
            }
        }

        stage('Run SonarQube Analysis') { // MARK: Run SonarQube Analysis
            when {
                expression {
                    env.STATUSRX == "1" && env.STATUSTEST == "1" && EXIST_JACOCO_REPORT
                }
            }
            steps {
                container("compiler") {
                    script {
                        echo "---------------------- Installing SonarQube Scanner ----------------------"
                        sh """
                        apt-get update && apt-get install -y wget unzip
                        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_VERSION}-linux.zip
                        unzip sonar-scanner-cli-${SONAR_VERSION}-linux.zip
                        """
                        env.PATH = "${env.PATH}:${WORKSPACE}/sonar-scanner-${SONAR_VERSION}-linux/bin"
                        dir(RX_DIR) {
                            def sonarSources = "./libs,./modules_core" 
                            def sonarProjectKey = sh(script: "grep 'sonar.projectKey' sonar-project.properties | cut -d '=' -f2", returnStdout: true).trim()
                            echo "SonarQube Project Key: ${sonarProjectKey}"

                            echo "---------------------- Running SonarQube ----------------------"
                            sh """
                            ${WORKSPACE}/sonar-scanner-${SONAR_VERSION}-linux/bin/sonar-scanner -X \
                                -Dsonar.projectKey=${sonarProjectKey} \
                                -Dsonar.sources=${sonarSources} \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN} \
                                -Dsonar.branch.name=${GIT_BRANCH} \
                                -Dsonar.projectVersion=${GIT_COMMIT} \
                                -Dsonar.java.coveragePlugin=jacoco \
                                -Dsonar.coverage.jacoco.xmlReportPaths=${JACOCO_REPORT}
                            """
                            
                            echo "---------------------- Getting SonarQube Report URL ----------------------"
                            def branchName = URLEncoder.encode(GIT_BRANCH, 'UTF-8')
                            sh "echo \"${SONARQUBE_URL}\" > url_sonar.txt"
                            def sonarUrl = readFile('url_sonar.txt').trim()
                            def projectUrl = "${sonarUrl}dashboard?id=${sonarProjectKey}&branch=${branchName}"
                            env.PROJECT_URL = "${projectUrl}"
                            echo "Sonar Project URL: ${PROJECT_URL}"

                            echo "---------------------- SonarQube Analysis Successful ----------------------"
                        }
                    }
                }
            }
        }
    }
    post { // MARK: Post Actions
        fixed {
            mail to: EMAIL_ADDRESS,
            subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body: """
                <html>
                    <head>
                        <style>
                            body { font-family: 'Arial', sans-serif; }
                            .header { font-size: 16px; font-weight: bold; color: #333; }
                        </style>
                    </head>
                    <body>
                        <p><em>${new Date()}</em></p>
                        <p>__________________________________________________________</p>

                        <h2 class="header">✅ ERRORS FIXED ✅</h2>

                        ${COMMIT_INFO}

                        <p>The problems found in the previous run/s have been fixed! 💪<br>Check out the output in the following link: ${env.BUILD_URL}</p>

                        <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
                        <p>__________________________________________________________</p>
                    </body>
                </html>
            """
        }
        failure {
            script {
                sh "./pipelines/run-tests/build-update.sh ${RX_DIR} failure \"Failed Build Environments\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}"
                echo "---------------------- Failed Build Environments ----------------------"
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body:  """
                <html>
                    <head>
                        <style>
                            body { font-family: 'Arial', sans-serif; }
                            .header { font-size: 16px; font-weight: bold; color: #333; }
                        </style>
                    </head>
                    <body>
                        <p><em>${new Date()}</em></p>
                        <p>__________________________________________________________</p>

                        <h2 class="header">🚫 ERROR 🚫</h2>

                        ${COMMIT_INFO}

                        <p>The build has failed unexpectedly. This failure isn't likely to be caused by failing tests.<br>💡 This build was on an Etendo RX environment.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

                        <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
                        <p>__________________________________________________________</p>
                    </body>
                </html>
            """
        }
        unstable {
            script {
                sh "./pipelines/run-tests/build-update.sh ${RX_DIR} failure \"Failed Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}"
                echo "---------------------- Failed Test ----------------------"
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "⚠️ TESTS FAILED - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body:  """
                <html>
                    <head>
                        <style>
                            body { font-family: 'Arial', sans-serif; }
                            .header { font-size: 16px; font-weight: bold; color: #333; }
                        </style>
                    </head>
                    <body>
                        <p><em>${new Date()}</em></p>
                        <p>__________________________________________________________</p>

                        <h2 class="header">⚠️ BUILD UNSTABLE ⚠️</h2>

                        ${COMMIT_INFO}

                        <p>Tests have been detected that have failed in Etendo RX.<br>💡 These tests were run on a Postgres database environment.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

                        <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
                        <p>__________________________________________________________</p>
                    </body>
                </html>
            """
        }
        success {
            script {
                sh "./pipelines/run-tests/build-update.sh ${RX_DIR} success \"Successful Test Suites\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}"
                echo "---------------------- DONE ----------------------"
            }
            cleanWs deleteDirs: true
        }
    }
}
