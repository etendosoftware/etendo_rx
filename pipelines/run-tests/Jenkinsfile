pipeline {
    options {
        disableConcurrentBuilds()
    }

    environment { // MARK: Environment variables
        CONTEXT_NAME        = 'etendo'
        BBDD_SID            = 'etendo'
        BBDD_PORT           = '5432'
        BBDD_SYSTEMUSER     = 'postgres'
        BBDD_SYSTEMPASS     = 'syspass'
        BBDD_USER           = 'tad'
        BBDD_PASSWORD       = 'tad'
        NEXUS_USER          = credentials('nexus-admin-user')
        NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
        GITHUB_USER         = 'etendobot'
        GITHUB_TOKEN        = credentials('github-read-package-token')
        JAVA_HOME           = '/usr/lib/jvm/java-17-openjdk-amd64'
        ACCESS_TOKEN        = credentials('access_token_github')
        EMAIL_ADDRESS       = credentials('email_builds')
        RX_REPO_URL         = "https://github.com/etendosoftware/etendo_rx"
        RX_DIR              = "etendo_rx"

        COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

        STATUSCORE          = "1"
        BUILD_CLASSIC       = true

        SONAR_VERSION       = "4.6.2.2472"
        SONARQUBE_URL       = credentials('sonarqube-url')
        SONARQUBE_TOKEN     = credentials('sonar-token-access')
    }

    agent { // MARK: Agent
        kubernetes {
            inheritFrom 'jenkins-node-rx'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-core-unittests-rx
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node-core-unittests-rx
spec:
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.7
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
    - name: postgres
      image: postgres:14
      workingDir: /home/jenkins
      env:
        - name: POSTGRES_PASSWORD
          value: syspass
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext:
    privileged: true

"""
        }
    }
    stages { // MARK: Stages
        stage ('Clone and Setup RX Repo') { // MARK: Clone RX Repo
            steps {
                container('compiler') {
                    script {
                        try {
                            echo "---------------------- Clonning and Setup RX Repo ----------------------"
                            sh """
                            printenv
                            git clone ${RX_REPO_URL}
                            cd ${RX_DIR}
                            git checkout ${GIT_COMMIT}
                            cp gradle.properties.template gradle.properties
                            sed -i 's/^githubUser=.*/githubUser=${GITHUB_USER}/' gradle.properties
                            sed -i 's/^githubToken=.*/githubToken=${GITHUB_TOKEN}/' gradle.properties
                            sed -i 's/^grpc.enabled=.*/grpc.enabled=true/' gradle.properties
                            sed -i 's/^data-rest.enabled=.*/data-rest.enabled=true/' gradle.properties
                            mkdir -p modules
                            ./gradlew :setup
                            """
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo "---------------------- Clone and Setup RX Repo Failed ----------------------"
                            currentBuild.result = 'UNSTABLE'
                            unstable('Clone and Setup RX Repo Failed')
                            env.STATUSTEST = "0"
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo Core') { // MARK: Build Environment Etendo Core
            when {
                expression {
                    env.BUILD_CLASSIC == "true"
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            sh "./pipelines/run-tests/build-update.sh ${RX_DIR} pending \"Build Environment Etendo Core\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}"
                            withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                                withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                                    echo "---------------------- Starting Classic Environment ----------------------"
                                    sh "GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone --branch develop git@github.com:etendosoftware/etendo_core.git"
                                    dir("etendo_core") {
                                        sh """
                                        echo -e "context.name=${CONTEXT_NAME}\n
                                        bbdd.sid=${BBDD_SID}\n
                                        bbdd.port=${BBDD_PORT}\n
                                        bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                                        bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                                        bbdd.user=${BBDD_USER}\n
                                        bbdd.password=${BBDD_PASSWORD}\n
                                        nexusUser=${NEXUS_USER}\n
                                        nexusPassword=${NEXUS_PASSWORD}\n
                                        githubUser=${GITHUB_USER}\n
                                        githubToken=${GITHUB_TOKEN}\n
                                        allow.root=true\n
                                        org.gradle.jvmargs=-Dfile.encoding=UTF-8" > gradle.properties
                                        """
                                        sh "./gradlew prepareConfig --info --stacktrace"
                                        sh "./gradlew setup --info --stacktrace"
                                        sh "./gradlew expandModules --info --stacktrace"

                                        sh """
                                        cd modules
                                        GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone --branch develop git@bitbucket.org:koodu_software/com.etendoerp.etendorx.git
                                        """
                                        
                                        sh "./gradlew install --info --stacktrace"
                                        sh "./gradlew smartbuild --info --stacktrace"
                                        env.STATUSCORE = "1"
                                        env.STATUSRX = "0"
                                        echo "---------------------- Classic Environment Successful ----------------------"
                                    }
                                }
                            }
                        } catch (Exception e) {
                            echo "---------------------- Classic Environment Failed ----------------------"
                            currentBuild.result = 'FAILED'
                            error('Classic Environment Failed')
                            env.STATUSCORE = "0"
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo RX') { // MARK: Build Environment Etendo RX
            when {
                expression {
                    env.STATUSCORE == "1"
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            echo "---------------------- Building Etendo RX Environment ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./pipelines/run-tests/build-update.sh ${RX_DIR} pending \"Building Etendo RX Environment\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}
                            mkdir -p modules
                            ./gradlew generate.entities --info
                            """
                            echo "---------------------- Build of Etendo RX Successful ----------------------"
                            env.STATUSRX = "1"
                            env.STATUSTEST = "1"
                        } catch (Exception e) {
                            echo "---------------------- Build of Etendo RX Failed ----------------------"
                            currentBuild.result = 'FAILED'
                            error('Build of Etendo RX Failed')
                            env.STATUSRX = "0"
                        }
                    }
                }
            }
        }
        stage ("Run AsyncProcess Tests") { // MARK: Run AsyncProcess Tests
            when {
                expression {
                    false
                }
            }
            steps {
                script {
                    try {
                        echo "---------------------- Running AsyncProcess Tests ----------------------"
                        sh """
                        cd ${RX_DIR}
                        ./gradlew :com.etendorx.asyncprocess:test jacocoRootReport --info
                        """
                        echo "---------------------- AsyncProcess Tests Successful ----------------------"
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo "---------------------- AsyncProcess Tests Failed ----------------------"
                        currentBuild.result = 'UNSTABLE'
                        unstable('AsyncProcess Tests Failed')
                        env.STATUSTEST = "0"
                    } 
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "${RX_DIR}/modules_core/com.etendorx.asyncprocess/build/reports/tests/test",
                        reportFiles: '*.html',
                        reportName: 'ASYNPROCESS TESTS REPORT',
                        reportTitles: ''
                    ])
                }
            }
        }
        stage ("Run Auth Tests") { // MARK: Run Auth Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Running Auth Tests ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./gradlew :com.etendorx.auth:test jacocoTestReport --info
                            """
                            echo "---------------------- Auth Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo "---------------------- Auth Tests Failed ----------------------"
                            currentBuild.result = 'UNSTABLE'
                            unstable('Auth Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_core/com.etendorx.auth/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_core/com.etendorx.auth/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'AUTH TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage ("Run Das Tests") { // MARK: Run Das Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Running Das Tests ----------------------"
                            def tests = [
                                "com.etendorx.das.test.RepositoryTest",
                                "com.etendorx.das.test.RestCallTest",
                                "com.etendorx.das.test.DefaultFiltersTest",
                                "com.etendorx.das.test.eventhandlertest.test.AnnotationTests",
                                "com.etendorx.das.unit.BindedRestControllerTest",
                                "com.etendorx.das.unit.JsonPathEntityRetrieverDefaultTest",
                                "com.etendorx.das.unit.MappingUtilsImplTest",
                                "com.etendorx.das.test.DisableEnableTriggersTest",
                                "com.etendorx.das.test.FieldMappingRestCallTest",
                                "com.etendorx.das.integration.PropertyMetadataTest",
                                "com.etendorx.das.unit.BaseDTORepositoryDefaultTests",
                                "com.etendorx.das.unit.JsonPathConverterBaseTests",
                                "com.etendorx.entities.mapper.lib.JsonPathEntityRetrieverBaseTests"
                            ]

                            int counter = 1

                            dir(RX_DIR) {
                                tests.each { test ->
                                    sh "./gradlew :com.etendorx.das:test --info --tests ${test} jacocoTestReport"
                                    sh "mv modules_core/com.etendorx.das/build/jacoco/test.exec modules_core/com.etendorx.das/build/jacoco/test${counter}.exec"
                                    counter++
                                }
                            }
                            echo "---------------------- Das Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo "---------------------- Das Tests Failed ----------------------"
                            currentBuild.result = 'UNSTABLE'
                            unstable('Das Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_core/com.etendorx.das/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_core/com.etendorx.das/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'DAS TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage ("Run Edge Tests") { // MARK: Run Edge Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Running Edge Tests ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./gradlew :com.etendorx.edge:test jacocoTestReport --info
                            """
                            echo "---------------------- Edge Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo "---------------------- Edge Tests Failed ----------------------"
                            currentBuild.result = 'UNSTABLE'
                            unstable('Edge Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_core/com.etendorx.edge/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_core/com.etendorx.edge/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'EDGE TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage ("Run Event Handler Tests") { // MARK: Run Event Handler Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            echo "---------------------- Running Event Handler Tests ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./gradlew :com.etendorx.test.eventhandler:test jacocoTestReport --info
                            """
                            echo "---------------------- Event Handler Successful ----------------------"
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo "---------------------- Event Handler Failed ----------------------"
                            currentBuild.result = 'UNSTABLE'
                            unstable('Event Handler Failed')
                            env.STATUSTEST = "0"
                        }
                        if (fileExists("${RX_DIR}/modules_test/com.etendorx.test.eventhandler/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_test/com.etendorx.test.eventhandler/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'EVENT HANDLER TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
        stage('Generate Coverage Report') { // MARK: Generate Coverage Report
            when {
                expression {
                    env.STATUSRX == "1" && env.STATUSTEST == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        dir(RX_DIR) {
                            echo "---------------------- Run jacocoRootReport ----------------------"
                            sh "./gradlew jacocoRootReport --info"

                            env.JACOCO_REPORT = "build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"

                            if (fileExists("${JACOCO_REPORT}")) {
                                echo "---------------------- Jacoco Report Found ----------------------"
                            }
                        }
                    }
                }
            }
        }

        stage('Run SonarQube Analysis') { // MARK: Run SonarQube Analysis
            when {
                expression {
                    env.STATUSRX == "1" && env.STATUSTEST == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        echo "---------------------- Installing SonarQube Scanner ----------------------"
                        sh """
                        apt-get update && apt-get install -y wget unzip
                        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_VERSION}-linux.zip
                        unzip sonar-scanner-cli-${SONAR_VERSION}-linux.zip
                        """
                        env.PATH = "${env.PATH}:${WORKSPACE}/sonar-scanner-${SONAR_VERSION}-linux/bin"
                        dir(RX_DIR) {
                            def sonarSources = "./libs,./modules_core" 
                            def sonarProjectKey = sh(script: "grep 'sonar.projectKey' sonar-project.properties | cut -d '=' -f2", returnStdout: true).trim()
                            echo "SonarQube Project Key: ${sonarProjectKey}"

                            echo "---------------------- Running SonarQube ----------------------"
                            sh """
                            ${WORKSPACE}/sonar-scanner-${SONAR_VERSION}-linux/bin/sonar-scanner -X \
                                -Dsonar.projectKey=${sonarProjectKey} \
                                -Dsonar.sources=${sonarSources} \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN} \
                                -Dsonar.branch.name=${GIT_BRANCH} \
                                -Dsonar.projectVersion=${GIT_COMMIT} \
                                -Dsonar.java.coveragePlugin=jacoco \
                                -Dsonar.coverage.jacoco.xmlReportPaths=${JACOCO_REPORT}
                            """
                        }
                    }
                }
            }
        }
    }
    post { // MARK: Post Actions
        fixed {
                mail to: EMAIL_ADDRESS,
                subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
                body: """
    ${new Date()}
    __________________________________________________________

    ✅ ERRORS FIXED ✅

    Commit: ${RX_REPO_URL}/commit/${env.GIT_COMMIT}
    Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

    The problems found in the previous run/s have been fixed! 💪
    Check out the output in the following link:
    ${env.BUILD_URL}
    __________________________________________________________
            """
        }
        failure {
            script {
                sh "./pipelines/run-tests/build-update.sh ${RX_DIR} failure \"Failed Build Environments\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}"
                echo "Failed Build Environments"
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
            body:  """
    ${new Date()}
    __________________________________________________________

    ⛔ ERROR ⛔

    Commit: ${RX_REPO_URL}/commit/${env.GIT_COMMIT}
    Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

    The build has failed unexpectedly.
    💡 This build was on an Etendo RX environment.
    To more information on the failing run visit:
    ${env.BUILD_URL}
    __________________________________________________________
            """
        }
        unstable {
            script {
                sh "./pipelines/run-tests/build-update.sh ${RX_DIR} failure \"Failed Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL}"
                echo "Failed Test"
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "⚠️ TESTS FAILED - ${currentBuild.fullDisplayName}",
            body: """
    ${new Date()}
    __________________________________________________________

    ⚠️ BUILD UNSTABLE ⚠️

    Commit: ${RX_REPO_URL}/commit/${env.GIT_COMMIT}
    Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

    Tests have been detected that have failed in Etendo RX.
    💡 These tests were run on a Postgres database environment.
    To more information on the failing run visit:
    ${env.BUILD_URL}
    __________________________________________________________
            """
        }
        success {
            script {
                sh "./pipelines/run-tests/build-update.sh ${RX_DIR} success \"Successful Test Suites\" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL"
                echo "---------------------- DONE ----------------------"
            }
            cleanWs deleteDirs: true
        }
    }
}
