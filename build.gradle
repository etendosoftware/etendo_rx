plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'java-library'
    id 'groovy'
    id 'com.etendorx.gradlepluginrx' version '2.0.0'
}

group = 'com.etendorx'
version = "$gradle.ext.version"
sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven {
        url = "${repositoryUrl}"
        credentials {
            username = "${repositoryUser}"
            password = "${repositoryPassword}"
        }
    }
}

task upgradeRxVersion() {
    final String MAJOR = 'major'
    final String MINOR = 'minor'
    final String PATCH = 'patch'
    doLast {
        def versionType
        if (project.hasProperty('type')){
            versionType = project.getProperty('type')
        } else {
            throw new GradleException("The parameter -Ptype is required")
        }

        if (versionType != MAJOR && versionType != MINOR && versionType != PATCH) {
            throw new GradleException("The parameter value '${versionType}' is not valid, the options should be 'major', 'minor' or 'patch'")
        }

        def version = project.gradle.ext.version.trim().split("\\.")

        if (version.length != 3) {
            throw new GradleException("The version must be in the format major.minor.patch")
        }

        switch (versionType) {
            case MAJOR:
                version[0]++
                version[1] = 0
                version[2] = 0
                break
            case MINOR:
                version[1]++
                version[2] = 0
                break
            case PATCH:
                version[2]++
                break
        }

        def nextVersion = "${version[0]}.${version[1]}.${version[2]}"

        //Rewrite settings.gradle file with new value
        def settingsGradleContent = file('settings.gradle').text
        settingsGradleContent = settingsGradleContent.replaceAll(/gradle.ext.version = '\d+.\d+.\d+'/, "gradle.ext.version = '${nextVersion}'")
        file('settings.gradle').write(settingsGradleContent)
        // Update version in libs/com.etendorx.generate_entities/src/main/resources/version.properties
        def versionPropertiesContent = file('libs/com.etendorx.generate_entities/src/main/resources/version.properties').text
        versionPropertiesContent = versionPropertiesContent.replaceAll(/version=\d+.\d+.\d+/, "version=${nextVersion}")
        file('libs/com.etendorx.generate_entities/src/main/resources/version.properties').write(versionPropertiesContent)
    }
}

test {
    useJUnitPlatform()
}
